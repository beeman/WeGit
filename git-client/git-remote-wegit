#!/usr/bin/env node

// Imports
// =============================================================================

const net = require('net');
//const transport = require('./lib/transport');
const parser = require('./lib/parser');
const sendInChunksMiddleware = require('wegit-lib/utils/sendInChunksMiddleware');

// Utils
// =============================================================================

const findAgent = meshState => {
  const wgOsConnection = meshState.connections
    .filter(c => c.state === 'connected')
    .filter(c => c.user && c.user.type === 'browser')[0];
  if (!wgOsConnection) return;

  return wgOsConnection.user.id;
};

// Main
// =============================================================================

const main = async () => {
  let meshState = {
    connections: [],
    globalState: 'disconnected',
  };

  const onChange = nextMeshState => (meshState = nextMeshState);

  const connection = net.connect({ port: 9001 }, () => {
    const { send, onMessage } = sendInChunksMiddleware({
      send(userId, message) {
        if (!userId) return;
        const { type, payload } = message;
        connection.write(
          JSON.stringify({
            method: 'send',
            args: [userId, { type: `app:${type}`, payload }],
          }),
        );
      },

      onMessage(message) {
        process.stdout.write(parser.messageToStdout(message));
      },
    });

    connection.on('data', data => {
      const { method, args } = JSON.parse(data.toString());
      switch (method) {
        case 'change':
          return onChange(...args);
        case 'onMessage':
          return onMessage(...args);
        default:
          throw new Error('unknown method');
      }
    });

    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', async () => {
      const message = parser.stdinToMessage(process.stdin.read());
      send(findAgent(meshState), message);
    });
  });

  connection.on('end', () => console.warn('disconnected from server'));
};

main();
